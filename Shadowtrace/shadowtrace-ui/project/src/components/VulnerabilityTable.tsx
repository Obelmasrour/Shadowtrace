import React, { useState } from 'react';

interface Vulnerability {
  name: string;
  risk: string;
  description: string;
  fix: string;
  score?: string;
}

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
}

const getRiskBadgeColor = (risk: string | undefined) => {
  if (!risk) return 'bg-gray-200 text-gray-800 dark:bg-gray-700 dark:text-gray-300';

  switch (risk.toLowerCase()) {
    case 'high':
      return 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300';
    case 'medium':
      return 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900 dark:text-yellow-300';
    case 'low':
      return 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300';
    default:
      return 'bg-gray-200 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
  }
};

const getVulnerabilityScore = (risk: string | undefined): string => {
  if (!risk) return 'N/A';
  switch (risk.toLowerCase()) {
    case 'high':
      return '8/10';
    case 'medium':
      return '5/10';
    case 'low':
      return '2/10';
    default:
      return 'N/A';
  }
};

const VulnerabilityTable: React.FC<VulnerabilityTableProps> = ({ vulnerabilities }) => {
  const [expandedIndex, setExpandedIndex] = useState<number | null>(null);

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
        <thead className="bg-gray-50 dark:bg-gray-800">
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Vulnerability
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Score / Risk
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Description
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Recommended Fix
            </th>
          </tr>
        </thead>
        <tbody className="bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700">
          {vulnerabilities.map((vuln, index) => (
            <tr key={`${vuln.name}-${index}`}>
              <td className="px-6 py-4 whitespace-normal text-sm font-medium text-gray-900 dark:text-white">
                {vuln.name}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-sm">
                <span
                  className={`inline-block px-2 py-1 rounded-full text-xs font-bold ${getRiskBadgeColor(vuln.risk)}`}
                >
                  {vuln.risk}
                </span>
                <div className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                  {getVulnerabilityScore(vuln.risk)}
                </div>
              </td>
              <td className="px-6 py-4 text-sm text-gray-700 dark:text-gray-300 max-w-md whitespace-normal">
                {expandedIndex === index ? (
                  <>
                    {vuln.description}
                    <button
                      onClick={() => setExpandedIndex(null)}
                      className="ml-2 text-blue-600 dark:text-blue-400 text-xs hover:underline"
                    >
                      See less
                    </button>
                  </>
                ) : (
                  <>
                    {vuln.description.slice(0, 150)}...
                    <button
                      onClick={() => setExpandedIndex(index)}
                      className="ml-2 text-blue-600 dark:text-blue-400 text-xs hover:underline"
                    >
                      More details
                    </button>
                  </>
                )}
              </td>
              <td className="px-6 py-4 text-sm text-gray-700 dark:text-gray-300 max-w-md whitespace-normal">
                {vuln.fix}
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {vulnerabilities.length === 0 && (
        <div className="text-center py-8 text-gray-500 dark:text-gray-400">
          No vulnerabilities detected
        </div>
      )}
    </div>
  );
};

export default VulnerabilityTable;
